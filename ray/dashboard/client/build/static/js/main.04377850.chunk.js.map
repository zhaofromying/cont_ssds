{"version":3,"sources":["api.ts","pages/dashboard/LastUpdated.tsx","pages/dashboard/logical-view/Actor.tsx","pages/dashboard/logical-view/Actors.tsx","pages/dashboard/logical-view/LogicalView.tsx","common/DialogWithTitle.tsx","common/NumberedLines.tsx","pages/dashboard/node-info/dialogs/errors/Errors.tsx","pages/dashboard/node-info/dialogs/logs/Logs.tsx","common/UsageBar.tsx","pages/dashboard/node-info/features/CPU.tsx","common/formatUtils.ts","pages/dashboard/node-info/features/Disk.tsx","common/SpanButton.tsx","pages/dashboard/node-info/features/Errors.tsx","pages/dashboard/node-info/features/Host.tsx","pages/dashboard/node-info/features/Logs.tsx","pages/dashboard/node-info/features/RAM.tsx","pages/dashboard/node-info/features/Received.tsx","pages/dashboard/node-info/features/Sent.tsx","pages/dashboard/node-info/features/Uptime.tsx","pages/dashboard/node-info/features/Workers.tsx","pages/dashboard/node-info/NodeRowGroup.tsx","pages/dashboard/node-info/TotalRow.tsx","pages/dashboard/node-info/NodeInfo.tsx","pages/dashboard/state.ts","pages/dashboard/ray-config/RayConfig.tsx","pages/dashboard/tune/TuneErrors.tsx","pages/dashboard/tune/TuneTable.tsx","pages/dashboard/tune/TuneTensorBoard.tsx","pages/dashboard/tune/Tune.tsx","pages/dashboard/Dashboard.tsx","store.ts","App.tsx","index.tsx"],"names":["base","window","location","origin","get","path","params","a","url","URL","Object","entries","key","value","searchParams","set","fetch","toString","response","json","result","error","Error","post","requestOptions","method","headers","body","JSON","stringify","getRayConfig","getNodeInfo","getRayletInfo","getErrors","hostname","pid","getLogs","launchProfiling","nodeId","duration","node_id","checkProfilingStatus","profilingId","profiling_id","getProfilingResultURL","encodeURIComponent","launchKillActor","actorId","actorIpAddress","actorPort","actor_id","ip_address","port","getTuneInfo","getTuneAvailability","setTuneExperiment","experiment","enableTuneTensorBoard","LastUpdated","this","props","classes","lastUpdatedAt","className","root","Typography","lastUpdated","Date","toLocaleString","React","Component","connect","state","dashboard","withStyles","theme","createStyles","marginTop","spacing","color","palette","text","secondary","fontSize","textAlign","main","Actor","expanded","profiling","setExpanded","setState","handleProfilingClick","actor","startTime","now","latestResponse","checkProfilingStatusLoop","status","setTimeout","killActor","ipAddress","information","label","actorTitle","usedResources","length","sort","b","localeCompare","map","join","taskQueueLength","numExecutedTasks","numObjectIdsInScope","numLocalObjects","usedObjectStoreMemory","requiredResources","actorCustomDisplay","webuiDisplay","keys","_","__","valueEncoded","valueParsed","parse","valueRendered","inlineHTML","dangerouslySetInnerHTML","__html","title","Fragment","children","action","onClick","Math","round","href","rel","target","trim","undefined","invalidStateType","invalidStateTypeInfeasible","invalidStateTypePendingActor","datum","Collapse","in","actors","borderColor","divider","borderStyle","borderWidth","padding","primary","textDecoration","cursor","marginLeft","display","Actors","LogicalView","rayletInfo","warning","warningIcon","marginBottom","verticalAlign","DialogWithTitle","handleClose","Dialog","paper","fullWidth","maxWidth","onClose","open","scroll","IconButton","closeButton","position","right","top","zIndex","borderBottomColor","borderBottomStyle","borderBottomWidth","lineHeight","paddingBottom","NumberedLines","lines","Table","TableBody","line","index","TableRow","TableCell","classNames","cell","lineNumber","data-line-number","overflowX","fontFamily","paddingRight","width","content","whiteSpace","Errors","clearErrorDialog","errors","header","message","timestamp","split","backgroundColor","fade","borderLeftColor","borderLeftStyle","borderLeftWidth","Logs","clearLogDialog","log","UsageBar","percent","max","minColor","leftColor","rightColor","ratio","r1","g1","b1","blend","min","gradient","inner","style","background","paddingLeft","ClusterCPU","cpuWeightedAverage","input","totalWeightTimesValue","totalWeight","weight","getWeightedAverage","nodes","node","cpus","cpu","minWidth","toFixed","NodeCPU","WorkerCPU","worker","cpu_percent","formatByteAmount","amount","unit","pow","formatUsage","used","total","usedFormatted","totalFormatted","formatDuration","durationInSeconds","durationSeconds","floor","durationMinutes","durationHours","durationDays","pad","padStart","ClusterDisk","disk","NodeDisk","WorkerDisk","component","variant","SpanButton","otherProps","button","makeClusterErrors","errorCounts","totalErrorCount","ip","makeNodeErrors","setErrorDialog","makeWorkerErrors","perWorker","ClusterHost","NodeHost","WorkerHost","cmdline","makeClusterLogs","logCounts","totalLogCount","makeNodeLogs","setLogDialog","makeWorkerLogs","ClusterRAM","mem","NodeRAM","WorkerRAM","memory_info","rss","ClusterReceived","totalReceived","net","NodeReceived","WorkerReceived","ClusterSent","totalSent","NodeSent","WorkerSent","getUptime","bootTime","ClusterUptime","NodeUptime","boot_time","WorkerUptime","create_time","ClusterWorkers","totalWorkers","totalCpus","workers","NodeWorkers","WorkerWorkers","NodeRowGroup","initialExpanded","toggleExpand","raylet","features","NodeFeature","WorkerFeature","hover","expandCollapseCell","expandCollapseIcon","extraInfo","colSpan","TotalRow","ClusterFeature","totalIcon","borderTopColor","borderTopStyle","borderTopWidth","NodeInfo","logDialog","errorDialog","nodeInfo","clients","client","log_counts","count","error_counts","table","TableHead","slice","createSlice","name","initialState","tab","rayConfig","tuneInfo","tuneAvailability","reducers","setTab","payload","setRayConfig","setNodeAndRayletInfo","setTuneInfo","setTuneAvailability","setError","dashboardActions","actions","dashboardReducer","reducer","mapDispatchToProps","RayConfig","refreshRayConfig","formattedRayConfig","autoscaling_mode","head_type","worker_type","min_workers","initial_workers","max_workers","idle_timeout_minutes","paddingTop","TuneErrors","currentError","handleOpen","job_id","trial_id","Link","TuneTable","timeout","sortedColumn","ascending","metricParamColumn","metricColumns","paramColumns","errorTrial","onColumnClick","column","humanize","str","part","charAt","toUpperCase","sortedCell","chosenMetricParam","active","TableSortLabel","direction","sortedTrialRecords","trial_records","trialDetails","values","getAttribute","trial","handleMetricChoiceChange","event","checked","push","filter","metricChoices","metricNames","FormControl","FormLabel","FormGroup","FormControlLabel","control","Checkbox","includes","onChange","handleParamChoiceChange","paramChoices","paramNames","paramChecklist","firstTrial","paramsDict","k","viewableParams","paramOptions","metrics","viewableMetrics","metricOptions","Grid","container","item","xs","checkboxRoot","stickyHeader","height","overflowY","TuneTensorBoard","tensorBoardEnabled","loading","handleSubmit","then","tensorBoard","tensorboard","tensorboard_current","src","board","enabled","tensorboard_enabled","Button","CircularProgress","progress","size","border","Tune","tabIndex","refreshTuneInfo","available","handleTabChange","handleExperimentChange","handleExperimentSubmit","clearTimeout","experimentChoice","prompt","heading","TextField","id","submit","trials_available","tabs","SelectedComponent","Tabs","indicatorColor","textColor","Tab","fontsize","formControl","margin","Dashboard","timeoutId","refreshNodeAndRayletInfo","Promise","all","splice","store","configureStore","devTools","process","App","CssBaseline","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04377850.chunk.js","sourcesContent":["const base =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:8265\"\n    : window.location.origin;\n\n// TODO(mitchellstern): Add JSON schema validation for the responses.\nconst get = async <T>(path: string, params: { [key: string]: any }) => {\n  const url = new URL(path, base);\n  for (const [key, value] of Object.entries(params)) {\n    url.searchParams.set(key, value);\n  }\n\n  const response = await fetch(url.toString());\n  const json = await response.json();\n\n  const { result, error } = json;\n\n  if (error !== null) {\n    throw Error(error);\n  }\n\n  return result as T;\n};\n\nconst post = async <T>(path: string, params: { [key: string]: any }) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(params),\n  };\n\n  const url = new URL(path, base);\n\n  const response = await fetch(url.toString(), requestOptions);\n  const json = await response.json();\n\n  const { result, error } = json;\n\n  if (error !== null) {\n    throw Error(error);\n  }\n\n  return result as T;\n};\n\nexport type RayConfigResponse = {\n  min_workers: number;\n  max_workers: number;\n  initial_workers: number;\n  autoscaling_mode: string;\n  idle_timeout_minutes: number;\n  head_type: string;\n  worker_type: string;\n};\n\nexport const getRayConfig = () => get<RayConfigResponse>(\"/api/ray_config\", {});\n\nexport type NodeInfoResponse = {\n  clients: Array<{\n    now: number;\n    hostname: string;\n    ip: string;\n    boot_time: number; // System boot time expressed in seconds since epoch\n    cpu: number; // System-wide CPU utilization expressed as a percentage\n    cpus: [number, number]; // Number of logical CPUs and physical CPUs\n    mem: [number, number, number]; // Total, available, and used percentage of memory\n    disk: {\n      [path: string]: {\n        total: number;\n        free: number;\n        used: number;\n        percent: number;\n      };\n    };\n    load_avg: [[number, number, number], [number, number, number]];\n    net: [number, number]; // Sent and received network traffic in bytes / second\n    workers: Array<{\n      pid: number;\n      create_time: number;\n      cmdline: string[];\n      cpu_percent: number;\n      cpu_times: {\n        system: number;\n        children_system: number;\n        user: number;\n        children_user: number;\n      };\n      memory_info: {\n        pageins: number;\n        pfaults: number;\n        vms: number;\n        rss: number;\n      };\n    }>;\n  }>;\n  log_counts: {\n    [ip: string]: {\n      [pid: string]: number;\n    };\n  };\n  error_counts: {\n    [ip: string]: {\n      [pid: string]: number;\n    };\n  };\n};\n\nexport const getNodeInfo = () => get<NodeInfoResponse>(\"/api/node_info\", {});\n\nexport type RayletInfoResponse = {\n  nodes: {\n    [ip: string]: {\n      extraInfo?: string;\n      workersStats: {\n        pid: number;\n        isDriver?: boolean;\n      }[];\n    };\n  };\n  actors: {\n    [actorId: string]:\n      | {\n          actorId: string;\n          actorTitle: string;\n          averageTaskExecutionSpeed: number;\n          children: RayletInfoResponse[\"actors\"];\n          // currentTaskFuncDesc: string[];\n          ipAddress: string;\n          isDirectCall: boolean;\n          jobId: string;\n          nodeId: string;\n          numExecutedTasks: number;\n          numLocalObjects: number;\n          numObjectIdsInScope: number;\n          pid: number;\n          port: number;\n          state: 0 | 1 | 2;\n          taskQueueLength: number;\n          timestamp: number;\n          usedObjectStoreMemory: number;\n          usedResources: { [key: string]: number };\n          currentTaskDesc?: string;\n          numPendingTasks?: number;\n          webuiDisplay?: Record<string, string>;\n        }\n      | {\n          actorId: string;\n          actorTitle: string;\n          requiredResources: { [key: string]: number };\n          state: -1;\n          invalidStateType?: \"infeasibleActor\" | \"pendingActor\";\n        };\n  };\n};\n\nexport const getRayletInfo = () =>\n  get<RayletInfoResponse>(\"/api/raylet_info\", {});\n\nexport type ErrorsResponse = {\n  [pid: string]: Array<{\n    message: string;\n    timestamp: number;\n    type: string;\n  }>;\n};\n\nexport const getErrors = (hostname: string, pid: number | null) =>\n  get<ErrorsResponse>(\"/api/errors\", {\n    hostname,\n    pid: pid === null ? \"\" : pid,\n  });\n\nexport type LogsResponse = {\n  [pid: string]: string[];\n};\n\nexport const getLogs = (hostname: string, pid: number | null) =>\n  get<LogsResponse>(\"/api/logs\", {\n    hostname,\n    pid: pid === null ? \"\" : pid,\n  });\n\nexport type LaunchProfilingResponse = string;\n\nexport const launchProfiling = (\n  nodeId: string,\n  pid: number,\n  duration: number,\n) =>\n  get<LaunchProfilingResponse>(\"/api/launch_profiling\", {\n    node_id: nodeId,\n    pid: pid,\n    duration: duration,\n  });\n\nexport type CheckProfilingStatusResponse =\n  | { status: \"pending\" }\n  | { status: \"finished\" }\n  | { status: \"error\"; error: string };\n\nexport const checkProfilingStatus = (profilingId: string) =>\n  get<CheckProfilingStatusResponse>(\"/api/check_profiling_status\", {\n    profiling_id: profilingId,\n  });\n\nexport const getProfilingResultURL = (profilingId: string) =>\n  `${base}/speedscope/index.html#profileURL=${encodeURIComponent(\n    `${base}/api/get_profiling_info?profiling_id=${profilingId}`,\n  )}`;\n\nexport const launchKillActor = (\n  actorId: string,\n  actorIpAddress: string,\n  actorPort: number,\n) =>\n  get<object>(\"/api/kill_actor\", {\n    // make sure object is okay\n    actor_id: actorId,\n    ip_address: actorIpAddress,\n    port: actorPort,\n  });\n\nexport type TuneTrial = {\n  date: string;\n  episodes_total: string;\n  experiment_id: string;\n  experiment_tag: string;\n  hostname: string;\n  iterations_since_restore: number;\n  logdir: string;\n  node_ip: string;\n  pid: number;\n  time_since_restore: number;\n  time_this_iter_s: number;\n  time_total_s: number;\n  timestamp: number;\n  timesteps_since_restore: number;\n  timesteps_total: number;\n  training_iteration: number;\n  start_time: string;\n  status: string;\n  trial_id: string | number;\n  job_id: string;\n  params: { [key: string]: string | number };\n  metrics: { [key: string]: string | number };\n  error: string;\n};\n\nexport type TuneError = {\n  text: string;\n  job_id: string;\n  trial_id: string;\n};\n\nexport type TuneJobResponse = {\n  trial_records: { [key: string]: TuneTrial };\n  errors: { [key: string]: TuneError };\n  tensorboard: {\n    tensorboard_current: boolean;\n    tensorboard_enabled: boolean;\n  };\n};\n\nexport const getTuneInfo = () => get<TuneJobResponse>(\"/api/tune_info\", {});\n\nexport type TuneAvailabilityResponse = {\n  available: boolean;\n  trials_available: boolean;\n};\n\nexport const getTuneAvailability = () =>\n  get<TuneAvailabilityResponse>(\"/api/tune_availability\", {});\n\nexport type TuneSetExperimentReponse = {\n  experiment: string;\n};\n\nexport const setTuneExperiment = (experiment: string) =>\n  post<TuneSetExperimentReponse>(\"/api/set_tune_experiment\", {\n    experiment: experiment,\n  });\n\nexport const enableTuneTensorBoard = () =>\n  post<{}>(\"/api/enable_tune_tensorboard\", {});\n","import {\n  createStyles,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../store\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      marginTop: theme.spacing(2),\n    },\n    lastUpdated: {\n      color: theme.palette.text.secondary,\n      fontSize: \"0.8125rem\",\n      textAlign: \"center\",\n    },\n    error: {\n      color: theme.palette.error.main,\n      fontSize: \"0.8125rem\",\n      textAlign: \"center\",\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  lastUpdatedAt: state.dashboard.lastUpdatedAt,\n  error: state.dashboard.error,\n});\n\nclass LastUpdated extends React.Component<\n  WithStyles<typeof styles> & ReturnType<typeof mapStateToProps>\n> {\n  render() {\n    const { classes, lastUpdatedAt, error } = this.props;\n    return (\n      <div className={classes.root}>\n        {lastUpdatedAt !== null && (\n          <Typography className={classes.lastUpdated}>\n            Last updated: {new Date(lastUpdatedAt).toLocaleString()}\n          </Typography>\n        )}\n        {error !== null && (\n          <Typography className={classes.error}>{error}</Typography>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(LastUpdated));\n","import {\n  Collapse,\n  createStyles,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport {\n  checkProfilingStatus,\n  CheckProfilingStatusResponse,\n  getProfilingResultURL,\n  launchKillActor,\n  launchProfiling,\n  RayletInfoResponse,\n} from \"../../../api\";\nimport Actors from \"./Actors\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      borderColor: theme.palette.divider,\n      borderStyle: \"solid\",\n      borderWidth: 1,\n      marginTop: theme.spacing(2),\n      padding: theme.spacing(2),\n    },\n    title: {\n      color: theme.palette.text.secondary,\n      fontSize: \"0.75rem\",\n    },\n    action: {\n      color: theme.palette.primary.main,\n      textDecoration: \"none\",\n      \"&:hover\": {\n        cursor: \"pointer\",\n      },\n    },\n    invalidStateTypeInfeasible: {\n      color: theme.palette.error.main,\n    },\n    invalidStateTypePendingActor: {\n      color: theme.palette.secondary.main,\n    },\n    information: {\n      fontSize: \"0.875rem\",\n    },\n    datum: {\n      \"&:not(:first-child)\": {\n        marginLeft: theme.spacing(2),\n      },\n    },\n    webuiDisplay: {\n      fontSize: \"0.875rem\",\n    },\n    inlineHTML: {\n      fontSize: \"0.875rem\",\n      display: \"inline\",\n    },\n  });\n\ntype Props = {\n  actor: RayletInfoResponse[\"actors\"][keyof RayletInfoResponse[\"actors\"]];\n};\n\ntype State = {\n  expanded: boolean;\n  profiling: {\n    [profilingId: string]: {\n      startTime: number;\n      latestResponse: CheckProfilingStatusResponse | null;\n    };\n  };\n};\n\nclass Actor extends React.Component<Props & WithStyles<typeof styles>, State> {\n  state: State = {\n    expanded: true,\n    profiling: {},\n  };\n\n  setExpanded = (expanded: boolean) => () => {\n    this.setState({ expanded });\n  };\n\n  handleProfilingClick = (duration: number) => async () => {\n    const actor = this.props.actor;\n    if (actor.state !== -1) {\n      const profilingId = await launchProfiling(\n        actor.nodeId,\n        actor.pid,\n        duration,\n      );\n      this.setState((state) => ({\n        profiling: {\n          ...state.profiling,\n          [profilingId]: { startTime: Date.now(), latestResponse: null },\n        },\n      }));\n      const checkProfilingStatusLoop = async () => {\n        const response = await checkProfilingStatus(profilingId);\n        this.setState((state) => ({\n          profiling: {\n            ...state.profiling,\n            [profilingId]: {\n              ...state.profiling[profilingId],\n              latestResponse: response,\n            },\n          },\n        }));\n        if (response.status === \"pending\") {\n          setTimeout(checkProfilingStatusLoop, 1000);\n        }\n      };\n      await checkProfilingStatusLoop();\n    }\n  };\n\n  killActor = () => {\n    const actor = this.props.actor;\n    if (actor.state === 0) {\n      launchKillActor(actor.actorId, actor.ipAddress, actor.port);\n    }\n  };\n\n  render() {\n    const { classes, actor } = this.props;\n    const { expanded, profiling } = this.state;\n\n    const information =\n      actor.state !== -1\n        ? [\n            {\n              label: \"ActorTitle\",\n              value: actor.actorTitle,\n            },\n            {\n              label: \"State\",\n              value: actor.state.toLocaleString(),\n            },\n            {\n              label: \"Resources\",\n              value:\n                Object.entries(actor.usedResources).length > 0 &&\n                Object.entries(actor.usedResources)\n                  .sort((a, b) => a[0].localeCompare(b[0]))\n                  .map(([key, value]) => `${value.toLocaleString()} ${key}`)\n                  .join(\", \"),\n            },\n            {\n              label: \"Pending\",\n              value: actor.taskQueueLength.toLocaleString(),\n            },\n            {\n              label: \"Executed\",\n              value: actor.numExecutedTasks.toLocaleString(),\n            },\n            {\n              label: \"NumObjectIdsInScope\",\n              value: actor.numObjectIdsInScope.toLocaleString(),\n            },\n            {\n              label: \"NumLocalObjects\",\n              value: actor.numLocalObjects.toLocaleString(),\n            },\n            {\n              label: \"UsedLocalObjectMemory\",\n              value: actor.usedObjectStoreMemory.toLocaleString(),\n            },\n            // {\n            //   label: \"Task\",\n            //   value: actor.currentTaskFuncDesc.join(\".\")\n            // }\n          ]\n        : [\n            {\n              label: \"ID\",\n              value: actor.actorId,\n            },\n            {\n              label: \"Required resources\",\n              value:\n                Object.entries(actor.requiredResources).length > 0 &&\n                Object.entries(actor.requiredResources)\n                  .sort((a, b) => a[0].localeCompare(b[0]))\n                  .map(([key, value]) => `${value.toLocaleString()} ${key}`)\n                  .join(\", \"),\n            },\n          ];\n\n    // Construct the custom message from the actor.\n    let actorCustomDisplay: JSX.Element[] = [];\n    if (actor.state !== -1 && actor.webuiDisplay) {\n      actorCustomDisplay = Object.keys(actor.webuiDisplay)\n        .sort()\n        .map((key, _, __) => {\n          // Construct the value from actor.\n          // Please refer to worker.py::show_in_webui for schema.\n          const valueEncoded = actor.webuiDisplay![key];\n          const valueParsed = JSON.parse(valueEncoded);\n          let valueRendered = valueParsed[\"message\"];\n          if (valueParsed[\"dtype\"] === \"html\") {\n            valueRendered = (\n              <div\n                className={classes.inlineHTML}\n                dangerouslySetInnerHTML={{ __html: valueRendered }}\n              ></div>\n            );\n          }\n\n          if (key === \"\") {\n            return (\n              <Typography className={classes.webuiDisplay}>\n                &nbsp; &nbsp; {valueRendered}\n              </Typography>\n            );\n          } else {\n            return (\n              <Typography className={classes.webuiDisplay}>\n                &nbsp; &nbsp; {key}: {valueRendered}\n              </Typography>\n            );\n          }\n        });\n    }\n\n    return (\n      <div className={classes.root}>\n        <Typography className={classes.title}>\n          {actor.state !== -1 ? (\n            <React.Fragment>\n              Actor {actor.actorId}{\" \"}\n              {Object.entries(actor.children).length > 0 && (\n                <React.Fragment>\n                  (\n                  <span\n                    className={classes.action}\n                    onClick={this.setExpanded(!expanded)}\n                  >\n                    {expanded ? \"Collapse\" : \"Expand\"}\n                  </span>\n                  )\n                </React.Fragment>\n              )}{\" \"}\n              (Profile for\n              {[10, 30, 60].map((duration) => (\n                <React.Fragment>\n                  {\" \"}\n                  <span\n                    className={classes.action}\n                    onClick={this.handleProfilingClick(duration)}\n                  >\n                    {duration}s\n                  </span>\n                </React.Fragment>\n              ))}\n              ){\" \"}\n              {actor.state === 0 && (\n                <span className={classes.action} onClick={this.killActor}>\n                  Kill Actor\n                </span>\n              )}\n              {Object.entries(profiling).map(\n                ([profilingId, { startTime, latestResponse }]) =>\n                  latestResponse !== null && (\n                    <React.Fragment>\n                      (\n                      {latestResponse.status === \"pending\" ? (\n                        `Profiling for ${Math.round(\n                          (Date.now() - startTime) / 1000,\n                        )}s...`\n                      ) : latestResponse.status === \"finished\" ? (\n                        <a\n                          className={classes.action}\n                          href={getProfilingResultURL(profilingId)}\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                        >\n                          Profiling result\n                        </a>\n                      ) : latestResponse.status === \"error\" ? (\n                        `Profiling error: ${latestResponse.error.trim()}`\n                      ) : undefined}\n                      ){\" \"}\n                    </React.Fragment>\n                  ),\n              )}\n            </React.Fragment>\n          ) : actor.invalidStateType === \"infeasibleActor\" ? (\n            <span className={classes.invalidStateTypeInfeasible}>\n              {actor.actorTitle} is infeasible. (This actor cannot be created\n              because the Ray cluster cannot satisfy its resource requirements.)\n            </span>\n          ) : (\n            <span className={classes.invalidStateTypePendingActor}>\n              {actor.actorTitle} is pending until resources are available.\n            </span>\n          )}\n        </Typography>\n        <Typography className={classes.information}>\n          {information.map(\n            ({ label, value }) =>\n              value &&\n              value.length > 0 && (\n                <React.Fragment key={label}>\n                  <span className={classes.datum}>\n                    {label}: {value}\n                  </span>{\" \"}\n                </React.Fragment>\n              ),\n          )}\n        </Typography>\n        {actor.state !== -1 && (\n          <React.Fragment>\n            {actorCustomDisplay.length > 0 && (\n              <React.Fragment>{actorCustomDisplay}</React.Fragment>\n            )}\n\n            <Collapse in={expanded}>\n              <Actors actors={actor.children} />\n            </Collapse>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Actor);\n","import { createStyles, Theme, withStyles, WithStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { RayletInfoResponse } from \"../../../api\";\nimport Actor from \"./Actor\";\n\nconst styles = (theme: Theme) => createStyles({});\n\ntype Props = {\n  actors: RayletInfoResponse[\"actors\"];\n};\n\nclass Actors extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { actors } = this.props;\n    return Object.entries(actors).map(([actorId, actor]) => (\n      <Actor actor={actor} key={actorId} />\n    ));\n  }\n}\n\nexport default withStyles(styles)(Actors);\n","import {\n  createStyles,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport WarningRoundedIcon from \"@material-ui/icons/WarningRounded\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../../store\";\nimport Actors from \"./Actors\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    warning: {\n      fontSize: \"0.8125rem\",\n      marginBottom: theme.spacing(2),\n    },\n    warningIcon: {\n      fontSize: \"1.25em\",\n      verticalAlign: \"text-bottom\",\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  rayletInfo: state.dashboard.rayletInfo,\n});\n\nclass LogicalView extends React.Component<\n  WithStyles<typeof styles> & ReturnType<typeof mapStateToProps>\n> {\n  render() {\n    const { classes, rayletInfo } = this.props;\n    return (\n      <div>\n        <Typography className={classes.warning} color=\"textSecondary\">\n          <WarningRoundedIcon className={classes.warningIcon} /> Note: This tab\n          is experimental.\n        </Typography>\n        {rayletInfo === null ? (\n          <Typography color=\"textSecondary\">Loading...</Typography>\n        ) : Object.entries(rayletInfo.actors).length === 0 ? (\n          <Typography color=\"textSecondary\">No actors found.</Typography>\n        ) : (\n          <Actors actors={rayletInfo.actors} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(LogicalView));\n","import {\n  createStyles,\n  Dialog,\n  IconButton,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      padding: theme.spacing(3),\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: theme.spacing(1.5),\n      top: theme.spacing(1.5),\n      zIndex: 1,\n    },\n    title: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n      fontSize: \"1.5rem\",\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      paddingBottom: theme.spacing(3),\n    },\n  });\n\ntype Props = {\n  handleClose: () => void;\n  title: string;\n};\n\nclass DialogWithTitle extends React.Component<\n  Props & WithStyles<typeof styles>\n> {\n  render() {\n    const { classes, handleClose, title } = this.props;\n    return (\n      <Dialog\n        classes={{ paper: classes.paper }}\n        fullWidth\n        maxWidth=\"md\"\n        onClose={handleClose}\n        open\n        scroll=\"body\"\n      >\n        <IconButton className={classes.closeButton} onClick={handleClose}>\n          <CloseIcon />\n        </IconButton>\n        <Typography className={classes.title}>{title}</Typography>\n        {this.props.children}\n      </Dialog>\n    );\n  }\n}\n\nexport default withStyles(styles)(DialogWithTitle);\n","import {\n  createStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      overflowX: \"auto\",\n    },\n    cell: {\n      borderWidth: 0,\n      fontFamily: \"SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace\",\n      padding: 0,\n      \"&:last-child\": {\n        paddingRight: 0,\n      },\n    },\n    lineNumber: {\n      color: theme.palette.text.secondary,\n      paddingRight: theme.spacing(2),\n      textAlign: \"right\",\n      verticalAlign: \"top\",\n      width: \"1%\",\n      // Use a ::before pseudo-element for the line number so that it won't\n      // interact with user selections or searching.\n      \"&::before\": {\n        content: \"attr(data-line-number)\",\n      },\n    },\n    line: {\n      textAlign: \"left\",\n      whiteSpace: \"pre-wrap\",\n    },\n  });\n\ntype Props = {\n  lines: string[];\n};\n\nclass NumberedLines extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, lines } = this.props;\n    return (\n      <Table>\n        <TableBody>\n          {lines.map((line, index) => (\n            <TableRow key={index}>\n              <TableCell\n                className={classNames(classes.cell, classes.lineNumber)}\n                data-line-number={index + 1}\n              />\n              <TableCell className={classNames(classes.cell, classes.line)}>\n                {line}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    );\n  }\n}\n\nexport default withStyles(styles)(NumberedLines);\n","import {\n  createStyles,\n  fade,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { ErrorsResponse, getErrors } from \"../../../../../api\";\nimport DialogWithTitle from \"../../../../../common/DialogWithTitle\";\nimport NumberedLines from \"../../../../../common/NumberedLines\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    header: {\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      marginTop: theme.spacing(3),\n    },\n    error: {\n      backgroundColor: fade(theme.palette.error.main, 0.04),\n      borderLeftColor: theme.palette.error.main,\n      borderLeftStyle: \"solid\",\n      borderLeftWidth: 2,\n      marginTop: theme.spacing(3),\n      padding: theme.spacing(2),\n    },\n    timestamp: {\n      color: theme.palette.text.secondary,\n      marginBottom: theme.spacing(1),\n    },\n  });\n\ntype Props = {\n  clearErrorDialog: () => void;\n  hostname: string;\n  pid: number | null;\n};\n\ntype State = {\n  result: ErrorsResponse | null;\n  error: string | null;\n};\n\nclass Errors extends React.Component<Props & WithStyles<typeof styles>, State> {\n  state: State = {\n    result: null,\n    error: null,\n  };\n\n  async componentDidMount() {\n    try {\n      const { hostname, pid } = this.props;\n      const result = await getErrors(hostname, pid);\n      this.setState({ result, error: null });\n    } catch (error) {\n      this.setState({ result: null, error: error.toString() });\n    }\n  }\n\n  render() {\n    const { classes, clearErrorDialog, hostname } = this.props;\n    const { result, error } = this.state;\n\n    return (\n      <DialogWithTitle handleClose={clearErrorDialog} title=\"Errors\">\n        {error !== null ? (\n          <Typography color=\"error\">{error}</Typography>\n        ) : result === null ? (\n          <Typography color=\"textSecondary\">Loading...</Typography>\n        ) : (\n          Object.entries(result).map(([pid, errors]) => (\n            <React.Fragment key={pid}>\n              <Typography className={classes.header}>\n                {hostname} (PID: {pid})\n              </Typography>\n              {errors.length > 0 ? (\n                errors.map(({ message, timestamp }, index) => (\n                  <div className={classes.error} key={index}>\n                    <Typography className={classes.timestamp}>\n                      Error at {new Date(timestamp * 1000).toLocaleString()}\n                    </Typography>\n                    <NumberedLines lines={message.trim().split(\"\\n\")} />\n                  </div>\n                ))\n              ) : (\n                <Typography color=\"textSecondary\">No errors found.</Typography>\n              )}\n            </React.Fragment>\n          ))\n        )}\n      </DialogWithTitle>\n    );\n  }\n}\n\nexport default withStyles(styles)(Errors);\n","import {\n  createStyles,\n  fade,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { getLogs, LogsResponse } from \"../../../../../api\";\nimport DialogWithTitle from \"../../../../../common/DialogWithTitle\";\nimport NumberedLines from \"../../../../../common/NumberedLines\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    header: {\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      marginTop: theme.spacing(3),\n    },\n    log: {\n      backgroundColor: fade(theme.palette.primary.main, 0.04),\n      borderLeftColor: theme.palette.primary.main,\n      borderLeftStyle: \"solid\",\n      borderLeftWidth: 2,\n      padding: theme.spacing(2),\n    },\n  });\n\ntype Props = {\n  clearLogDialog: () => void;\n  hostname: string;\n  pid: number | null;\n};\n\ntype State = {\n  result: LogsResponse | null;\n  error: string | null;\n};\n\nclass Logs extends React.Component<Props & WithStyles<typeof styles>, State> {\n  state: State = {\n    result: null,\n    error: null,\n  };\n\n  async componentDidMount() {\n    try {\n      const { hostname, pid } = this.props;\n      const result = await getLogs(hostname, pid);\n      this.setState({ result, error: null });\n    } catch (error) {\n      this.setState({ result: null, error: error.toString() });\n    }\n  }\n\n  render() {\n    const { classes, clearLogDialog, hostname } = this.props;\n    const { result, error } = this.state;\n\n    return (\n      <DialogWithTitle handleClose={clearLogDialog} title=\"Logs\">\n        {error !== null ? (\n          <Typography color=\"error\">{error}</Typography>\n        ) : result === null ? (\n          <Typography color=\"textSecondary\">Loading...</Typography>\n        ) : (\n          Object.entries(result).map(([pid, lines]) => (\n            <React.Fragment key={pid}>\n              <Typography className={classes.header}>\n                {hostname} (PID: {pid})\n              </Typography>\n              {lines.length > 0 ? (\n                <div className={classes.log}>\n                  <NumberedLines lines={lines} />\n                </div>\n              ) : (\n                <Typography color=\"textSecondary\">No logs found.</Typography>\n              )}\n            </React.Fragment>\n          ))\n        )}\n      </DialogWithTitle>\n    );\n  }\n}\n\nexport default withStyles(styles)(Logs);\n","import { createStyles, Theme, withStyles, WithStyles } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst blend = (\n  [r1, g1, b1]: number[],\n  [r2, g2, b2]: number[],\n  ratio: number,\n) => [\n  r1 * (1 - ratio) + r2 * ratio,\n  g1 * (1 - ratio) + g2 * ratio,\n  b1 * (1 - ratio) + b2 * ratio,\n];\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      borderColor: theme.palette.divider,\n      borderStyle: \"solid\",\n      borderWidth: 1,\n    },\n    inner: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n    },\n  });\n\ntype Props = {\n  percent: number;\n  text: string;\n};\n\nclass UsageBar extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, text } = this.props;\n\n    let { percent } = this.props;\n    percent = Math.max(percent, 0);\n    percent = Math.min(percent, 100);\n\n    const minColor = [0, 255, 0];\n    const maxColor = [255, 0, 0];\n\n    const leftColor = minColor;\n    const rightColor = blend(minColor, maxColor, percent / 100);\n    const alpha = 0.2;\n\n    const gradient = `\n      linear-gradient(\n        to right,\n        rgba(${leftColor.join(\",\")}, ${alpha}) 0%,\n        rgba(${rightColor.join(\",\")}, ${alpha}) ${percent}%,\n        transparent ${percent}%\n      )\n    `;\n\n    // Use a nested `div` here because the right border is affected by the\n    // gradient background otherwise.\n    return (\n      <div className={classes.root}>\n        <div className={classes.inner} style={{ background: gradient }}>\n          {text}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(UsageBar);\n","import React from \"react\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nconst getWeightedAverage = (\n  input: {\n    weight: number;\n    value: number;\n  }[],\n) => {\n  if (input.length === 0) {\n    return 0;\n  }\n\n  let totalWeightTimesValue = 0;\n  let totalWeight = 0;\n  for (const { weight, value } of input) {\n    totalWeightTimesValue += weight * value;\n    totalWeight += weight;\n  }\n  return totalWeightTimesValue / totalWeight;\n};\n\nexport const ClusterCPU: ClusterFeatureComponent = ({ nodes }) => {\n  const cpuWeightedAverage = getWeightedAverage(\n    nodes.map((node) => ({ weight: node.cpus[0], value: node.cpu })),\n  );\n  return (\n    <div style={{ minWidth: 60 }}>\n      <UsageBar\n        percent={cpuWeightedAverage}\n        text={`${cpuWeightedAverage.toFixed(1)}%`}\n      />\n    </div>\n  );\n};\n\nexport const NodeCPU: NodeFeatureComponent = ({ node }) => (\n  <div style={{ minWidth: 60 }}>\n    <UsageBar percent={node.cpu} text={`${node.cpu.toFixed(1)}%`} />\n  </div>\n);\n\nexport const WorkerCPU: WorkerFeatureComponent = ({ worker }) => (\n  <div style={{ minWidth: 60 }}>\n    <UsageBar\n      percent={worker.cpu_percent}\n      text={`${worker.cpu_percent.toFixed(1)}%`}\n    />\n  </div>\n);\n","export const formatByteAmount = (\n  amount: number,\n  unit: \"mebibyte\" | \"gibibyte\",\n) =>\n  `${(\n    amount / (unit === \"mebibyte\" ? Math.pow(1024, 2) : Math.pow(1024, 3))\n  ).toFixed(1)} ${unit === \"mebibyte\" ? \"MiB\" : \"GiB\"}`;\n\nexport const formatUsage = (\n  used: number,\n  total: number,\n  unit: \"mebibyte\" | \"gibibyte\",\n) => {\n  const usedFormatted = formatByteAmount(used, unit);\n  const totalFormatted = formatByteAmount(total, unit);\n  const percent = (100 * used) / total;\n  return `${usedFormatted} / ${totalFormatted} (${percent.toFixed(0)}%)`;\n};\n\nexport const formatDuration = (durationInSeconds: number) => {\n  const durationSeconds = Math.floor(durationInSeconds) % 60;\n  const durationMinutes = Math.floor(durationInSeconds / 60) % 60;\n  const durationHours = Math.floor(durationInSeconds / 60 / 60) % 24;\n  const durationDays = Math.floor(durationInSeconds / 60 / 60 / 24);\n  const pad = (value: number) => value.toString().padStart(2, \"0\");\n  return [\n    durationDays ? `${durationDays}d` : \"\",\n    `${pad(durationHours)}h`,\n    `${pad(durationMinutes)}m`,\n    `${pad(durationSeconds)}s`,\n  ].join(\" \");\n};\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatUsage } from \"../../../../common/formatUtils\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterDisk: ClusterFeatureComponent = ({ nodes }) => {\n  let used = 0;\n  let total = 0;\n  for (const node of nodes) {\n    used += node.disk[\"/\"].used;\n    total += node.disk[\"/\"].total;\n  }\n  return (\n    <UsageBar\n      percent={(100 * used) / total}\n      text={formatUsage(used, total, \"gibibyte\")}\n    />\n  );\n};\n\nexport const NodeDisk: NodeFeatureComponent = ({ node }) => (\n  <UsageBar\n    percent={(100 * node.disk[\"/\"].used) / node.disk[\"/\"].total}\n    text={formatUsage(node.disk[\"/\"].used, node.disk[\"/\"].total, \"gibibyte\")}\n  />\n);\n\nexport const WorkerDisk: WorkerFeatureComponent = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n","import { createStyles, Theme, withStyles, WithStyles } from \"@material-ui/core\";\nimport React, { HTMLAttributes } from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    button: {\n      color: theme.palette.primary.main,\n      \"&:hover\": {\n        cursor: \"pointer\",\n        textDecoration: \"underline\",\n      },\n    },\n  });\n\nclass SpanButton extends React.Component<\n  HTMLAttributes<HTMLSpanElement> & WithStyles<typeof styles>\n> {\n  render() {\n    const { classes, ...otherProps } = this.props;\n    return <span className={classes.button} {...otherProps} />;\n  }\n}\n\nexport default withStyles(styles)(SpanButton);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport SpanButton from \"../../../../common/SpanButton\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const makeClusterErrors = (errorCounts: {\n  [ip: string]: {\n    perWorker: {\n      [pid: string]: number;\n    };\n    total: number;\n  };\n}): ClusterFeatureComponent => ({ nodes }) => {\n  let totalErrorCount = 0;\n  for (const node of nodes) {\n    if (node.ip in errorCounts) {\n      totalErrorCount += errorCounts[node.ip].total;\n    }\n  }\n  return totalErrorCount === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No errors\n    </Typography>\n  ) : (\n    <React.Fragment>\n      {totalErrorCount.toLocaleString()}{\" \"}\n      {totalErrorCount === 1 ? \"error\" : \"errors\"}\n    </React.Fragment>\n  );\n};\n\nexport const makeNodeErrors = (\n  errorCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  },\n  setErrorDialog: (hostname: string, pid: number | null) => void,\n): NodeFeatureComponent => ({ node }) =>\n  errorCounts.total === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No errors\n    </Typography>\n  ) : (\n    <SpanButton onClick={() => setErrorDialog(node.hostname, null)}>\n      View all errors ({errorCounts.total.toLocaleString()})\n    </SpanButton>\n  );\n\nexport const makeWorkerErrors = (\n  errorCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  },\n  setErrorDialog: (hostname: string, pid: number | null) => void,\n): WorkerFeatureComponent => ({ node, worker }) =>\n  errorCounts.perWorker[worker.pid] === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No errors\n    </Typography>\n  ) : (\n    <SpanButton onClick={() => setErrorDialog(node.hostname, worker.pid)}>\n      View errors ({errorCounts.perWorker[worker.pid].toLocaleString()})\n    </SpanButton>\n  );\n","import React from \"react\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterHost: ClusterFeatureComponent = ({ nodes }) => (\n  <React.Fragment>\n    Totals ({nodes.length.toLocaleString()}{\" \"}\n    {nodes.length === 1 ? \"host\" : \"hosts\"})\n  </React.Fragment>\n);\n\nexport const NodeHost: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>\n    {node.hostname} ({node.ip})\n  </React.Fragment>\n);\n\n// Ray worker process titles have one of the following forms: `ray::IDLE`,\n// `ray::function()`, `ray::Class`, or `ray::Class.method()`. We extract the\n// first portion here for display in the \"Host\" column. Note that this will\n// always be `ray` under the current setup, but it may vary in the future.\nexport const WorkerHost: WorkerFeatureComponent = ({ worker }) => (\n  <React.Fragment>\n    {worker.cmdline[0].split(\"::\", 2)[0]} (PID: {worker.pid})\n  </React.Fragment>\n);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport SpanButton from \"../../../../common/SpanButton\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const makeClusterLogs = (logCounts: {\n  [ip: string]: {\n    perWorker: {\n      [pid: string]: number;\n    };\n    total: number;\n  };\n}): ClusterFeatureComponent => ({ nodes }) => {\n  let totalLogCount = 0;\n  for (const node of nodes) {\n    if (node.ip in logCounts) {\n      totalLogCount += logCounts[node.ip].total;\n    }\n  }\n  return totalLogCount === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No logs\n    </Typography>\n  ) : (\n    <React.Fragment>\n      {totalLogCount.toLocaleString()} {totalLogCount === 1 ? \"line\" : \"lines\"}\n    </React.Fragment>\n  );\n};\n\nexport const makeNodeLogs = (\n  logCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  },\n  setLogDialog: (hostname: string, pid: number | null) => void,\n): NodeFeatureComponent => ({ node }) =>\n  logCounts.total === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No logs\n    </Typography>\n  ) : (\n    <SpanButton onClick={() => setLogDialog(node.hostname, null)}>\n      View all logs ({logCounts.total.toLocaleString()}{\" \"}\n      {logCounts.total === 1 ? \"line\" : \"lines\"})\n    </SpanButton>\n  );\n\nexport const makeWorkerLogs = (\n  logCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  },\n  setLogDialog: (hostname: string, pid: number | null) => void,\n): WorkerFeatureComponent => ({ node, worker }) =>\n  logCounts.perWorker[worker.pid] === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No logs\n    </Typography>\n  ) : (\n    <SpanButton onClick={() => setLogDialog(node.hostname, worker.pid)}>\n      View log ({logCounts.perWorker[worker.pid].toLocaleString()}{\" \"}\n      {logCounts.perWorker[worker.pid] === 1 ? \"line\" : \"lines\"})\n    </SpanButton>\n  );\n","import React from \"react\";\nimport { formatByteAmount, formatUsage } from \"../../../../common/formatUtils\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterRAM: ClusterFeatureComponent = ({ nodes }) => {\n  let used = 0;\n  let total = 0;\n  for (const node of nodes) {\n    used += node.mem[0] - node.mem[1];\n    total += node.mem[0];\n  }\n  return (\n    <UsageBar\n      percent={(100 * used) / total}\n      text={formatUsage(used, total, \"gibibyte\")}\n    />\n  );\n};\n\nexport const NodeRAM: NodeFeatureComponent = ({ node }) => (\n  <UsageBar\n    percent={(100 * (node.mem[0] - node.mem[1])) / node.mem[0]}\n    text={formatUsage(node.mem[0] - node.mem[1], node.mem[0], \"gibibyte\")}\n  />\n);\n\nexport const WorkerRAM: WorkerFeatureComponent = ({ node, worker }) => (\n  <UsageBar\n    percent={(100 * worker.memory_info.rss) / node.mem[0]}\n    text={formatByteAmount(worker.memory_info.rss, \"mebibyte\")}\n  />\n);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatByteAmount } from \"../../../../common/formatUtils\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterReceived: ClusterFeatureComponent = ({ nodes }) => {\n  let totalReceived = 0;\n  for (const node of nodes) {\n    totalReceived += node.net[1];\n  }\n  return (\n    <React.Fragment>\n      {formatByteAmount(totalReceived, \"mebibyte\")}/s\n    </React.Fragment>\n  );\n};\n\nexport const NodeReceived: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>{formatByteAmount(node.net[1], \"mebibyte\")}/s</React.Fragment>\n);\n\nexport const WorkerReceived: WorkerFeatureComponent = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatByteAmount } from \"../../../../common/formatUtils\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterSent: ClusterFeatureComponent = ({ nodes }) => {\n  let totalSent = 0;\n  for (const node of nodes) {\n    totalSent += node.net[0];\n  }\n  return (\n    <React.Fragment>{formatByteAmount(totalSent, \"mebibyte\")}/s</React.Fragment>\n  );\n};\n\nexport const NodeSent: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>{formatByteAmount(node.net[0], \"mebibyte\")}/s</React.Fragment>\n);\n\nexport const WorkerSent: WorkerFeatureComponent = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatDuration } from \"../../../../common/formatUtils\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nconst getUptime = (bootTime: number) => Date.now() / 1000 - bootTime;\n\nexport const ClusterUptime: ClusterFeatureComponent = ({ nodes }) => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n\nexport const NodeUptime: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>{formatDuration(getUptime(node.boot_time))}</React.Fragment>\n);\n\nexport const WorkerUptime: WorkerFeatureComponent = ({ worker }) => (\n  <React.Fragment>\n    {formatDuration(getUptime(worker.create_time))}\n  </React.Fragment>\n);\n","import React from \"react\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterWorkers: ClusterFeatureComponent = ({ nodes }) => {\n  let totalWorkers = 0;\n  let totalCpus = 0;\n  for (const node of nodes) {\n    totalWorkers += node.workers.length;\n    totalCpus += node.cpus[0];\n  }\n  return (\n    <React.Fragment>\n      {totalWorkers.toLocaleString()}{\" \"}\n      {totalWorkers === 1 ? \"worker\" : \"workers\"} / {totalCpus.toLocaleString()}{\" \"}\n      {totalCpus === 1 ? \"core\" : \"cores\"}\n    </React.Fragment>\n  );\n};\n\nexport const NodeWorkers: NodeFeatureComponent = ({ node }) => {\n  const workers = node.workers.length;\n  const cpus = node.cpus[0];\n  return (\n    <React.Fragment>\n      {workers.toLocaleString()} {workers === 1 ? \"worker\" : \"workers\"} /{\" \"}\n      {cpus.toLocaleString()} {cpus === 1 ? \"core\" : \"cores\"}\n    </React.Fragment>\n  );\n};\n\n// Ray worker process titles have one of the following forms: `ray::IDLE`,\n// `ray::function()`, `ray::Class`, or `ray::Class.method()`. We extract the\n// second portion here for display in the \"Workers\" column.\nexport const WorkerWorkers: WorkerFeatureComponent = ({ worker }) => (\n  <React.Fragment>{worker.cmdline[0].split(\"::\", 2)[1]}</React.Fragment>\n);\n","import {\n  createStyles,\n  TableCell,\n  TableRow,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { NodeInfoResponse, RayletInfoResponse } from \"../../../api\";\nimport { NodeCPU, WorkerCPU } from \"./features/CPU\";\nimport { NodeDisk, WorkerDisk } from \"./features/Disk\";\nimport { makeNodeErrors, makeWorkerErrors } from \"./features/Errors\";\nimport { NodeHost, WorkerHost } from \"./features/Host\";\nimport { makeNodeLogs, makeWorkerLogs } from \"./features/Logs\";\nimport { NodeRAM, WorkerRAM } from \"./features/RAM\";\nimport { NodeReceived, WorkerReceived } from \"./features/Received\";\nimport { NodeSent, WorkerSent } from \"./features/Sent\";\nimport { NodeUptime, WorkerUptime } from \"./features/Uptime\";\nimport { NodeWorkers, WorkerWorkers } from \"./features/Workers\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n    expandCollapseCell: {\n      cursor: \"pointer\",\n    },\n    expandCollapseIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\",\n    },\n    extraInfo: {\n      fontFamily: \"SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace\",\n      whiteSpace: \"pre\",\n    },\n  });\n\ntype ArrayType<T> = T extends Array<infer U> ? U : never;\ntype Node = ArrayType<NodeInfoResponse[\"clients\"]>;\n\ntype Props = {\n  node: Node;\n  raylet: RayletInfoResponse[\"nodes\"][keyof RayletInfoResponse[\"nodes\"]] | null;\n  logCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  };\n  errorCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  };\n  setLogDialog: (hostname: string, pid: number | null) => void;\n  setErrorDialog: (hostname: string, pid: number | null) => void;\n  initialExpanded: boolean;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\nclass NodeRowGroup extends React.Component<\n  Props & WithStyles<typeof styles>,\n  State\n> {\n  state: State = {\n    expanded: this.props.initialExpanded,\n  };\n\n  toggleExpand = () => {\n    this.setState((state) => ({\n      expanded: !state.expanded,\n    }));\n  };\n\n  render() {\n    const {\n      classes,\n      node,\n      raylet,\n      logCounts,\n      errorCounts,\n      setLogDialog,\n      setErrorDialog,\n    } = this.props;\n    const { expanded } = this.state;\n\n    const features = [\n      { NodeFeature: NodeHost, WorkerFeature: WorkerHost },\n      { NodeFeature: NodeWorkers, WorkerFeature: WorkerWorkers },\n      { NodeFeature: NodeUptime, WorkerFeature: WorkerUptime },\n      { NodeFeature: NodeCPU, WorkerFeature: WorkerCPU },\n      { NodeFeature: NodeRAM, WorkerFeature: WorkerRAM },\n      { NodeFeature: NodeDisk, WorkerFeature: WorkerDisk },\n      { NodeFeature: NodeSent, WorkerFeature: WorkerSent },\n      { NodeFeature: NodeReceived, WorkerFeature: WorkerReceived },\n      {\n        NodeFeature: makeNodeLogs(logCounts, setLogDialog),\n        WorkerFeature: makeWorkerLogs(logCounts, setLogDialog),\n      },\n      {\n        NodeFeature: makeNodeErrors(errorCounts, setErrorDialog),\n        WorkerFeature: makeWorkerErrors(errorCounts, setErrorDialog),\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <TableRow hover>\n          <TableCell\n            className={classNames(classes.cell, classes.expandCollapseCell)}\n            onClick={this.toggleExpand}\n          >\n            {!expanded ? (\n              <AddIcon className={classes.expandCollapseIcon} />\n            ) : (\n              <RemoveIcon className={classes.expandCollapseIcon} />\n            )}\n          </TableCell>\n          {features.map(({ NodeFeature }, index) => (\n            <TableCell className={classes.cell} key={index}>\n              <NodeFeature node={node} />\n            </TableCell>\n          ))}\n        </TableRow>\n        {expanded && (\n          <React.Fragment>\n            {raylet !== null && raylet.extraInfo !== undefined && (\n              <TableRow hover>\n                <TableCell className={classes.cell} />\n                <TableCell\n                  className={classNames(classes.cell, classes.extraInfo)}\n                  colSpan={features.length}\n                >\n                  {raylet.extraInfo}\n                </TableCell>\n              </TableRow>\n            )}\n            {node.workers.map((worker, index: number) => (\n              <TableRow hover key={index}>\n                <TableCell className={classes.cell} />\n                {features.map(({ WorkerFeature }, index) => (\n                  <TableCell className={classes.cell} key={index}>\n                    <WorkerFeature node={node} worker={worker} />\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </React.Fragment>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(NodeRowGroup);\n","import {\n  createStyles,\n  TableCell,\n  TableRow,\n  Theme,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport LayersIcon from \"@material-ui/icons/Layers\";\nimport React from \"react\";\nimport { NodeInfoResponse } from \"../../../api\";\nimport { ClusterCPU } from \"./features/CPU\";\nimport { ClusterDisk } from \"./features/Disk\";\nimport { makeClusterErrors } from \"./features/Errors\";\nimport { ClusterHost } from \"./features/Host\";\nimport { makeClusterLogs } from \"./features/Logs\";\nimport { ClusterRAM } from \"./features/RAM\";\nimport { ClusterReceived } from \"./features/Received\";\nimport { ClusterSent } from \"./features/Sent\";\nimport { ClusterUptime } from \"./features/Uptime\";\nimport { ClusterWorkers } from \"./features/Workers\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    cell: {\n      borderTopColor: theme.palette.divider,\n      borderTopStyle: \"solid\",\n      borderTopWidth: 2,\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n    totalIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\",\n    },\n  });\n\ntype Props = {\n  nodes: NodeInfoResponse[\"clients\"];\n  logCounts: {\n    [ip: string]: {\n      perWorker: { [pid: string]: number };\n      total: number;\n    };\n  };\n  errorCounts: {\n    [ip: string]: {\n      perWorker: { [pid: string]: number };\n      total: number;\n    };\n  };\n};\n\nclass TotalRow extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, nodes, logCounts, errorCounts } = this.props;\n\n    const features = [\n      { ClusterFeature: ClusterHost },\n      { ClusterFeature: ClusterWorkers },\n      { ClusterFeature: ClusterUptime },\n      { ClusterFeature: ClusterCPU },\n      { ClusterFeature: ClusterRAM },\n      { ClusterFeature: ClusterDisk },\n      { ClusterFeature: ClusterSent },\n      { ClusterFeature: ClusterReceived },\n      { ClusterFeature: makeClusterLogs(logCounts) },\n      { ClusterFeature: makeClusterErrors(errorCounts) },\n    ];\n\n    return (\n      <TableRow hover>\n        <TableCell className={classes.cell}>\n          <LayersIcon className={classes.totalIcon} />\n        </TableCell>\n        {features.map(({ ClusterFeature }, index) => (\n          <TableCell className={classes.cell} key={index}>\n            <ClusterFeature nodes={nodes} />\n          </TableCell>\n        ))}\n      </TableRow>\n    );\n  }\n}\n\nexport default withStyles(styles)(TotalRow);\n","import {\n  createStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../../store\";\nimport Errors from \"./dialogs/errors/Errors\";\nimport Logs from \"./dialogs/logs/Logs\";\nimport NodeRowGroup from \"./NodeRowGroup\";\nimport TotalRow from \"./TotalRow\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    table: {\n      marginTop: theme.spacing(1),\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  nodeInfo: state.dashboard.nodeInfo,\n  rayletInfo: state.dashboard.rayletInfo,\n});\n\ntype State = {\n  logDialog: { hostname: string; pid: number | null } | null;\n  errorDialog: { hostname: string; pid: number | null } | null;\n};\n\nclass NodeInfo extends React.Component<\n  WithStyles<typeof styles> & ReturnType<typeof mapStateToProps>\n> {\n  state: State = {\n    logDialog: null,\n    errorDialog: null,\n  };\n\n  setLogDialog = (hostname: string, pid: number | null) => {\n    this.setState({ logDialog: { hostname, pid } });\n  };\n\n  clearLogDialog = () => {\n    this.setState({ logDialog: null });\n  };\n\n  setErrorDialog = (hostname: string, pid: number | null) => {\n    this.setState({ errorDialog: { hostname, pid } });\n  };\n\n  clearErrorDialog = () => {\n    this.setState({ errorDialog: null });\n  };\n\n  render() {\n    const { classes, nodeInfo, rayletInfo } = this.props;\n    const { logDialog, errorDialog } = this.state;\n\n    if (nodeInfo === null || rayletInfo === null) {\n      return <Typography color=\"textSecondary\">Loading...</Typography>;\n    }\n\n    const logCounts: {\n      [ip: string]: {\n        perWorker: {\n          [pid: string]: number;\n        };\n        total: number;\n      };\n    } = {};\n\n    const errorCounts: {\n      [ip: string]: {\n        perWorker: {\n          [pid: string]: number;\n        };\n        total: number;\n      };\n    } = {};\n\n    for (const client of nodeInfo.clients) {\n      logCounts[client.ip] = { perWorker: {}, total: 0 };\n      errorCounts[client.ip] = { perWorker: {}, total: 0 };\n      for (const worker of client.workers) {\n        logCounts[client.ip].perWorker[worker.pid] = 0;\n        errorCounts[client.ip].perWorker[worker.pid] = 0;\n      }\n    }\n\n    for (const ip of Object.keys(nodeInfo.log_counts)) {\n      if (ip in logCounts) {\n        for (const [pid, count] of Object.entries(nodeInfo.log_counts[ip])) {\n          logCounts[ip].perWorker[pid] = count;\n          logCounts[ip].total += count;\n        }\n      }\n    }\n\n    for (const ip of Object.keys(nodeInfo.error_counts)) {\n      if (ip in errorCounts) {\n        for (const [pid, count] of Object.entries(nodeInfo.error_counts[ip])) {\n          errorCounts[ip].perWorker[pid] = count;\n          errorCounts[ip].total += count;\n        }\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell} />\n              <TableCell className={classes.cell}>Host</TableCell>\n              <TableCell className={classes.cell}>Workers</TableCell>\n              <TableCell className={classes.cell}>Uptime</TableCell>\n              <TableCell className={classes.cell}>CPU</TableCell>\n              <TableCell className={classes.cell}>RAM</TableCell>\n              <TableCell className={classes.cell}>Disk</TableCell>\n              <TableCell className={classes.cell}>Sent</TableCell>\n              <TableCell className={classes.cell}>Received</TableCell>\n              <TableCell className={classes.cell}>Logs</TableCell>\n              <TableCell className={classes.cell}>Errors</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {nodeInfo.clients.map((client) => (\n              <NodeRowGroup\n                key={client.ip}\n                node={client}\n                raylet={\n                  client.ip in rayletInfo.nodes\n                    ? rayletInfo.nodes[client.ip]\n                    : null\n                }\n                logCounts={logCounts[client.ip]}\n                errorCounts={errorCounts[client.ip]}\n                setLogDialog={this.setLogDialog}\n                setErrorDialog={this.setErrorDialog}\n                initialExpanded={nodeInfo.clients.length <= 1}\n              />\n            ))}\n            <TotalRow\n              nodes={nodeInfo.clients}\n              logCounts={logCounts}\n              errorCounts={errorCounts}\n            />\n          </TableBody>\n        </Table>\n        {logDialog !== null && (\n          <Logs\n            clearLogDialog={this.clearLogDialog}\n            hostname={logDialog.hostname}\n            pid={logDialog.pid}\n          />\n        )}\n        {errorDialog !== null && (\n          <Errors\n            clearErrorDialog={this.clearErrorDialog}\n            hostname={errorDialog.hostname}\n            pid={errorDialog.pid}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(NodeInfo));\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  NodeInfoResponse,\n  RayConfigResponse,\n  RayletInfoResponse,\n  TuneAvailabilityResponse,\n  TuneJobResponse,\n} from \"../../api\";\n\nconst name = \"dashboard\";\n\ntype State = {\n  tab: number;\n  rayConfig: RayConfigResponse | null;\n  nodeInfo: NodeInfoResponse | null;\n  rayletInfo: RayletInfoResponse | null;\n  tuneInfo: TuneJobResponse | null;\n  tuneAvailability: TuneAvailabilityResponse | null;\n  lastUpdatedAt: number | null;\n  error: string | null;\n};\n\nconst initialState: State = {\n  tab: 0,\n  rayConfig: null,\n  nodeInfo: null,\n  rayletInfo: null,\n  tuneInfo: null,\n  tuneAvailability: null,\n  lastUpdatedAt: null,\n  error: null,\n};\n\nconst slice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setTab: (state, action: PayloadAction<number>) => {\n      state.tab = action.payload;\n    },\n    setRayConfig: (state, action: PayloadAction<RayConfigResponse>) => {\n      state.rayConfig = action.payload;\n    },\n    setNodeAndRayletInfo: (\n      state,\n      action: PayloadAction<{\n        nodeInfo: NodeInfoResponse;\n        rayletInfo: RayletInfoResponse;\n      }>,\n    ) => {\n      state.nodeInfo = action.payload.nodeInfo;\n      state.rayletInfo = action.payload.rayletInfo;\n      state.lastUpdatedAt = Date.now();\n    },\n    setTuneInfo: (state, action: PayloadAction<TuneJobResponse>) => {\n      state.tuneInfo = action.payload;\n      state.lastUpdatedAt = Date.now();\n    },\n    setTuneAvailability: (\n      state,\n      action: PayloadAction<TuneAvailabilityResponse>,\n    ) => {\n      state.tuneAvailability = action.payload;\n      state.lastUpdatedAt = Date.now();\n    },\n    setError: (state, action: PayloadAction<string | null>) => {\n      state.error = action.payload;\n    },\n  },\n});\n\nexport const dashboardActions = slice.actions;\nexport const dashboardReducer = slice.reducer;\n","import {\n  createStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getRayConfig } from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    table: {\n      marginTop: theme.spacing(1),\n      width: \"auto\",\n    },\n    cell: {\n      paddingTop: theme.spacing(1),\n      paddingBottom: theme.spacing(1),\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(3),\n      },\n    },\n    key: {\n      color: theme.palette.text.secondary,\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  rayConfig: state.dashboard.rayConfig,\n});\n\nconst mapDispatchToProps = dashboardActions;\n\nclass RayConfig extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps\n> {\n  refreshRayConfig = async () => {\n    try {\n      const rayConfig = await getRayConfig();\n      this.props.setRayConfig(rayConfig);\n    } catch (error) {\n    } finally {\n      setTimeout(this.refreshRayConfig, 10 * 1000);\n    }\n  };\n\n  async componentDidMount() {\n    await this.refreshRayConfig();\n  }\n\n  render() {\n    const { classes, rayConfig } = this.props;\n\n    if (rayConfig === null) {\n      return (\n        <Typography color=\"textSecondary\">\n          No Ray configuration detected.\n        </Typography>\n      );\n    }\n\n    const formattedRayConfig = [\n      {\n        key: \"Autoscaling mode\",\n        value: rayConfig.autoscaling_mode,\n      },\n      {\n        key: \"Head node type\",\n        value: rayConfig.head_type,\n      },\n      {\n        key: \"Worker node type\",\n        value: rayConfig.worker_type,\n      },\n      {\n        key: \"Min worker nodes\",\n        value: rayConfig.min_workers,\n      },\n      {\n        key: \"Initial worker nodes\",\n        value: rayConfig.initial_workers,\n      },\n      {\n        key: \"Max worker nodes\",\n        value: rayConfig.max_workers,\n      },\n      {\n        key: \"Idle timeout\",\n        value: `${rayConfig.idle_timeout_minutes} ${\n          rayConfig.idle_timeout_minutes === 1 ? \"minute\" : \"minutes\"\n        }`,\n      },\n    ];\n\n    return (\n      <div>\n        <Typography>Ray cluster configuration:</Typography>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell}>Setting</TableCell>\n              <TableCell className={classes.cell}>Value</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {formattedRayConfig.map(({ key, value }, index) => (\n              <TableRow key={index}>\n                <TableCell className={classNames(classes.cell, classes.key)}>\n                  {key}\n                </TableCell>\n                <TableCell className={classes.cell}>{value}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(RayConfig));\n","import {\n  createStyles,\n  Link,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport DialogWithTitle from \"../../../common/DialogWithTitle\";\nimport NumberedLines from \"../../../common/NumberedLines\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    table: {\n      marginTop: theme.spacing(1),\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  tuneInfo: state.dashboard.tuneInfo,\n});\n\nconst mapDispatchToProps = dashboardActions;\n\ntype State = {\n  currentError: string;\n  open: boolean;\n};\n\nclass TuneErrors extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps,\n  State\n> {\n  state: State = {\n    currentError: \"\",\n    open: false,\n  };\n\n  handleOpen = (key: string) => {\n    this.setState({\n      open: true,\n      currentError: key,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      open: false,\n    });\n  };\n\n  render() {\n    const { classes, tuneInfo } = this.props;\n    const { currentError, open } = this.state;\n\n    if (tuneInfo === null || Object.keys(tuneInfo.errors).length === 0) {\n      return null;\n    }\n\n    return (\n      <React.Fragment>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell}> Job ID</TableCell>\n              <TableCell className={classes.cell}> Trial ID </TableCell>\n              <TableCell className={classes.cell}> Trial Directory </TableCell>\n              <TableCell className={classes.cell}> Error </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tuneInfo.errors !== null &&\n              Object.keys(tuneInfo.errors).map((key, index) => (\n                <TableRow key={index}>\n                  <TableCell className={classes.cell}>\n                    {tuneInfo.errors[key].job_id}\n                  </TableCell>\n                  <TableCell className={classes.cell}>\n                    {tuneInfo.errors[key].trial_id}\n                  </TableCell>\n                  <TableCell className={classes.cell}>{key}</TableCell>\n                  <TableCell className={classes.cell}>\n                    <Link\n                      component=\"button\"\n                      variant=\"body2\"\n                      onClick={() => {\n                        this.handleOpen(key);\n                      }}\n                    >\n                      Show Error\n                    </Link>\n                  </TableCell>\n                </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n        {open && (\n          <DialogWithTitle handleClose={this.handleClose} title=\"Error Log\">\n            {open && (\n              <NumberedLines\n                lines={tuneInfo.errors[currentError].text.trim().split(\"\\n\")}\n              />\n            )}\n          </DialogWithTitle>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(TuneErrors));\n","import {\n  Checkbox,\n  createStyles,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Grid,\n  Link,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Theme,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { TuneTrial } from \"../../../api\";\nimport DialogWithTitle from \"../../../common/DialogWithTitle\";\nimport NumberedLines from \"../../../common/NumberedLines\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(2),\n      },\n    },\n    table: {\n      marginTop: theme.spacing(1),\n      height: \"700px\",\n      overflowY: \"auto\",\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"right\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n    checkboxRoot: {\n      height: \"500px\",\n      overflowY: \"auto\",\n      overflowX: \"auto\",\n    },\n    paramChecklist: {\n      marginBottom: theme.spacing(2),\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  tuneInfo: state.dashboard.tuneInfo,\n});\n\ntype State = {\n  metricParamColumn: string;\n  ascending: boolean;\n  sortedColumn: keyof TuneTrial | undefined;\n  metricColumns: string[];\n  paramColumns: string[];\n  errorTrial: string;\n  open: boolean;\n};\n\nconst mapDispatchToProps = dashboardActions;\n\nclass TuneTable extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps,\n  State\n> {\n  timeout: number = 0;\n\n  state: State = {\n    sortedColumn: undefined,\n    ascending: true,\n    metricParamColumn: \"\",\n    metricColumns: [],\n    paramColumns: [],\n    errorTrial: \"\",\n    open: false,\n  };\n\n  onColumnClick = (column: keyof TuneTrial, metricParamColumn?: string) => {\n    let ascending = this.state.ascending;\n    if (column === this.state.sortedColumn) {\n      ascending = !ascending;\n    } else {\n      ascending = true;\n    }\n    this.setState({\n      sortedColumn: column,\n      ascending: ascending,\n    });\n\n    if (metricParamColumn) {\n      this.setState({\n        metricParamColumn: metricParamColumn,\n      });\n    }\n  };\n\n  /**\n   * Replaces all underscores with spaces and capitalizes all words\n   * in str\n   */\n  humanize = (str: string) =>\n    str\n      .split(\"_\")\n      .map((part) => part.charAt(0).toUpperCase() + part.slice(1))\n      .join(\" \");\n\n  handleOpen = (key: string | number) => {\n    if (typeof key === \"number\") {\n      key = key.toString();\n    }\n    this.setState({\n      open: true,\n      errorTrial: key,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      open: false,\n    });\n  };\n\n  sortedCell = (\n    name: keyof TuneTrial,\n    chosenMetricParam?: string,\n    index?: number,\n  ) => {\n    const { tuneInfo, classes } = this.props;\n    const { sortedColumn, ascending, metricParamColumn } = this.state;\n    let label: \"desc\" | \"asc\" = \"asc\";\n\n    if (name === sortedColumn && !ascending) {\n      label = \"desc\";\n    }\n\n    if (tuneInfo === null) {\n      return;\n    }\n\n    let onClick = () => this.onColumnClick(name);\n    if (chosenMetricParam) {\n      onClick = () => this.onColumnClick(name, chosenMetricParam);\n    }\n\n    if (!index) {\n      index = 0;\n    }\n\n    let active = false;\n    let key: string = name + index.toString();\n    if (chosenMetricParam) {\n      key = chosenMetricParam + index.toString();\n      active = chosenMetricParam === metricParamColumn && sortedColumn === name;\n    } else {\n      active = name === sortedColumn;\n    }\n\n    return (\n      <TableCell className={classes.cell} key={key} onClick={onClick}>\n        <TableSortLabel active={active} direction={label} />\n        {chosenMetricParam\n          ? this.humanize(chosenMetricParam)\n          : this.humanize(name)}\n      </TableCell>\n    );\n  };\n\n  sortedTrialRecords = () => {\n    const { tuneInfo } = this.props;\n    const { sortedColumn, ascending, metricParamColumn } = this.state;\n\n    if (tuneInfo === null || Object.keys(tuneInfo.trial_records).length === 0) {\n      return null;\n    }\n\n    const trialDetails = Object.values(tuneInfo.trial_records);\n\n    if (!sortedColumn) {\n      return trialDetails;\n    }\n\n    let getAttribute = (trial: TuneTrial) => trial[sortedColumn!];\n    if (sortedColumn === \"metrics\" || sortedColumn === \"params\") {\n      getAttribute = (trial: TuneTrial) =>\n        trial[sortedColumn!][metricParamColumn];\n    }\n\n    if (sortedColumn) {\n      if (ascending) {\n        trialDetails.sort((a, b) =>\n          getAttribute(a) > getAttribute(b) ? 1 : -1,\n        );\n      } else if (!ascending) {\n        trialDetails.sort((a, b) =>\n          getAttribute(a) < getAttribute(b) ? 1 : -1,\n        );\n      }\n    }\n\n    return trialDetails;\n  };\n\n  handleMetricChoiceChange = (name: string) => (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    let { metricColumns } = this.state;\n    if (event.target.checked) {\n      metricColumns.push(name);\n      this.setState({\n        metricColumns: metricColumns,\n      });\n    } else {\n      metricColumns = metricColumns.filter((value) => value !== name);\n      this.setState({\n        metricColumns: metricColumns,\n      });\n    }\n  };\n\n  metricChoices = (metricNames: string[]) => {\n    const { metricColumns } = this.state;\n\n    return (\n      <FormControl>\n        <FormLabel component=\"legend\">Select Metrics </FormLabel>\n        <FormGroup>\n          {metricNames.map((value) => (\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={metricColumns.includes(value)}\n                  onChange={this.handleMetricChoiceChange(value)}\n                  value={value}\n                  color=\"primary\"\n                />\n              }\n              label={value}\n            />\n          ))}\n        </FormGroup>\n      </FormControl>\n    );\n  };\n\n  handleParamChoiceChange = (name: string) => (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    let { paramColumns } = this.state;\n    if (event.target.checked) {\n      paramColumns.push(name);\n      this.setState({\n        paramColumns: paramColumns,\n      });\n    } else {\n      paramColumns = paramColumns.filter((value) => value !== name);\n      this.setState({\n        paramColumns: paramColumns,\n      });\n    }\n  };\n\n  paramChoices = (paramNames: string[]) => {\n    const { classes } = this.props;\n    const { paramColumns } = this.state;\n    return (\n      <FormControl className={classes.paramChecklist}>\n        <FormLabel component=\"legend\">Select Parameters </FormLabel>\n        <FormGroup>\n          {paramNames.map((value) => (\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={paramColumns.includes(value)}\n                  onChange={this.handleParamChoiceChange(value)}\n                  value={value}\n                  color=\"primary\"\n                />\n              }\n              label={value}\n            />\n          ))}\n        </FormGroup>\n      </FormControl>\n    );\n  };\n\n  render() {\n    const { classes, tuneInfo } = this.props;\n\n    const { metricColumns, paramColumns, open, errorTrial } = this.state;\n\n    if (\n      tuneInfo === null ||\n      Object.keys(tuneInfo[\"trial_records\"]).length === 0\n    ) {\n      return null;\n    }\n\n    const firstTrial = Object.keys(tuneInfo.trial_records)[0];\n    const paramsDict = tuneInfo.trial_records[firstTrial].params;\n    const paramNames = Object.keys(paramsDict).filter((k) => k !== \"args\");\n\n    let viewableParams = paramNames;\n    const paramOptions = paramNames.length > 3;\n    if (paramOptions) {\n      if (paramColumns.length === 0) {\n        this.setState({\n          paramColumns: paramNames.slice(0, 3),\n        });\n      }\n      viewableParams = paramColumns;\n    }\n\n    const metricNames = Object.keys(tuneInfo.trial_records[firstTrial].metrics);\n\n    let viewableMetrics = metricNames;\n    const metricOptions = metricNames.length > 3;\n    if (metricOptions) {\n      if (metricColumns.length === 0) {\n        this.setState({\n          metricColumns: metricNames.slice(0, 3),\n        });\n      }\n      viewableMetrics = metricColumns;\n    }\n\n    const trialDetails = this.sortedTrialRecords();\n\n    return (\n      <div className={classes.root}>\n        <Grid container spacing={0}>\n          {(paramOptions || metricOptions) && (\n            <Grid item xs={2} className={classes.checkboxRoot}>\n              {paramOptions && this.paramChoices(paramNames)}\n              {metricOptions && this.metricChoices(metricNames)}\n            </Grid>\n          )}\n          <Grid\n            item\n            xs={paramOptions || metricOptions ? 10 : 12}\n            className={classes.table}\n          >\n            <Table stickyHeader>\n              <TableHead>\n                <TableRow>\n                  {this.sortedCell(\"trial_id\")}\n                  {this.sortedCell(\"job_id\")}\n                  {this.sortedCell(\"start_time\")}\n                  {viewableParams.map((value, index) =>\n                    this.sortedCell(\"params\", value, index),\n                  )}\n                  {this.sortedCell(\"status\")}\n                  {viewableMetrics.map((value, index) =>\n                    this.sortedCell(\"metrics\", value, index),\n                  )}\n                  <TableCell className={classes.cell} key=\"error\">\n                    Error\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {trialDetails !== null &&\n                  trialDetails.map((trial, index) => (\n                    <TableRow key={index}>\n                      <TableCell className={classes.cell}>\n                        {trial[\"trial_id\"]}\n                      </TableCell>\n                      <TableCell className={classes.cell}>\n                        {trial[\"job_id\"]}\n                      </TableCell>\n                      <TableCell className={classes.cell}>\n                        {trial[\"start_time\"]}\n                      </TableCell>\n                      {viewableParams.map((value, index) => (\n                        <TableCell className={classes.cell} key={index}>\n                          {trial[\"params\"][value]}\n                        </TableCell>\n                      ))}\n                      <TableCell className={classes.cell}>\n                        {trial[\"status\"]}\n                      </TableCell>\n                      {trial[\"metrics\"] &&\n                        viewableMetrics.map((value, index) => (\n                          <TableCell className={classes.cell} key={index}>\n                            {trial[\"metrics\"][value]}\n                          </TableCell>\n                        ))}\n                      <TableCell className={classes.cell}>\n                        {trial[\"error\"] === \"No Error\" ? (\n                          \"No Error\"\n                        ) : (\n                          <Link\n                            component=\"button\"\n                            variant=\"body2\"\n                            onClick={() => {\n                              this.handleOpen(trial[\"trial_id\"]);\n                            }}\n                          >\n                            Show Error\n                          </Link>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n              </TableBody>\n            </Table>\n          </Grid>\n        </Grid>\n        {open && (\n          <DialogWithTitle handleClose={this.handleClose} title=\"Error Log\">\n            {open && (\n              <NumberedLines\n                lines={tuneInfo.trial_records[errorTrial].error\n                  .trim()\n                  .split(\"\\n\")}\n              />\n            )}\n          </DialogWithTitle>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(TuneTable));\n","import {\n  Button,\n  CircularProgress,\n  createStyles,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { enableTuneTensorBoard } from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(4),\n      },\n    },\n    board: {\n      width: \"100%\",\n      height: \"1000px\",\n      border: \"none\",\n    },\n    warning: {\n      fontSize: \"0.8125rem\",\n    },\n    progress: {\n      marginLeft: \"10px\",\n      marginTop: \"2px\",\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  error: state.dashboard.error,\n  tuneInfo: state.dashboard.tuneInfo,\n});\n\ntype State = {\n  tensorBoardEnabled: boolean;\n  loading: boolean;\n};\n\nconst mapDispatchToProps = dashboardActions;\n\nclass TuneTensorBoard extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps,\n  State\n> {\n  state: State = {\n    tensorBoardEnabled: false,\n    loading: false,\n  };\n\n  enableTensorBoard() {\n    enableTuneTensorBoard();\n    this.setState({\n      tensorBoardEnabled: true,\n    });\n  }\n\n  handleSubmit = () => {\n    this.setState({ loading: true });\n    enableTuneTensorBoard().then(() => {\n      this.setState({ loading: false });\n    });\n  };\n\n  tensorBoard = () => {\n    const { classes, error, tuneInfo } = this.props;\n\n    return (\n      <div>\n        {error === \"TypeError: Failed to fetch\" && (\n          <Typography className={classes.warning} color=\"textSecondary\">\n            Warning: Tensorboard server closed. View Tensorboard by running\n            \"tensorboard --logdir\" if not displaying below.\n          </Typography>\n        )}\n        {tuneInfo && !tuneInfo.tensorboard.tensorboard_current && (\n          <Typography className={classes.warning} color=\"textSecondary\">\n            The below Tensorboard reflects a previously entered log directory.\n            Restart the Ray Dashboard to change the Tensorboard logdir.\n          </Typography>\n        )}\n        <iframe\n          src=\"http://localhost:6006/\"\n          className={classes.board}\n          title=\"TensorBoard\"\n        ></iframe>\n      </div>\n    );\n  };\n\n  render() {\n    const { classes, tuneInfo } = this.props;\n\n    const { loading } = this.state;\n\n    if (tuneInfo === null) {\n      return;\n    }\n    const enabled = tuneInfo.tensorboard.tensorboard_enabled;\n    return (\n      <div className={classes.root}>\n        {!enabled && (\n          <div>\n            <Button\n              variant=\"outlined\"\n              onClick={this.handleSubmit}\n              className={classes.warning}\n            >\n              Enable TensorBoard\n            </Button>\n            {loading && (\n              <CircularProgress className={classes.progress} size={25} />\n            )}\n          </div>\n        )}\n\n        {enabled && this.tensorBoard()}\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(TuneTensorBoard));\n","import {\n  Button,\n  CircularProgress,\n  createStyles,\n  Tab,\n  Tabs,\n  TextField,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport WarningRoundedIcon from \"@material-ui/icons/WarningRounded\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getTuneInfo, setTuneExperiment } from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\nimport TuneErrors from \"./TuneErrors\";\nimport TuneTable from \"./TuneTable\";\nimport TuneTensorBoard from \"./TuneTensorBoard\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n    },\n    tabs: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n    },\n    heading: {\n      fontsize: \"0.9em\",\n      marginTop: theme.spacing(2),\n    },\n    warning: {\n      fontSize: \"1em\",\n    },\n    warningIcon: {\n      fontSize: \"1.25em\",\n      verticalAlign: \"text-bottom\",\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    submit: {\n      marginLeft: theme.spacing(2),\n      fontSize: \"0.8125em\",\n    },\n    prompt: {\n      fontSize: \"1em\",\n      marginTop: theme.spacing(1),\n    },\n    input: {\n      width: \"85%\",\n    },\n    progress: {\n      marginLeft: theme.spacing(2),\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  tuneInfo: state.dashboard.tuneInfo,\n  tuneAvailability: state.dashboard.tuneAvailability,\n});\n\nconst mapDispatchToProps = dashboardActions;\n\ntype State = {\n  tabIndex: number;\n  experiment: string;\n  loading: boolean;\n};\n\nclass Tune extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps,\n  State\n> {\n  timeout: number = 0;\n\n  state: State = {\n    tabIndex: 0,\n    experiment: \"\",\n    loading: false,\n  };\n\n  refreshTuneInfo = async () => {\n    try {\n      if (\n        this.props.tuneAvailability &&\n        this.props.tuneAvailability.available\n      ) {\n        const tuneInfo = await getTuneInfo();\n        this.props.setTuneInfo(tuneInfo);\n      }\n    } catch (error) {\n      this.props.setError(error.toString());\n    } finally {\n      this.timeout = window.setTimeout(this.refreshTuneInfo, 1000);\n    }\n  };\n\n  async componentWillUnmount() {\n    window.clearTimeout(this.timeout);\n  }\n\n  handleTabChange = (event: React.ChangeEvent<{}>, value: number) => {\n    this.setState({\n      tabIndex: value,\n    });\n  };\n\n  handleExperimentChange = (event: React.ChangeEvent<{ value: any }>) => {\n    this.setState({\n      experiment: event.target.value,\n    });\n  };\n\n  handleExperimentSubmit = async () => {\n    this.setState({ loading: true });\n    try {\n      await setTuneExperiment(this.state.experiment);\n      window.clearTimeout(this.timeout);\n      await this.refreshTuneInfo();\n      this.setState({ loading: false });\n    } catch (error) {\n      this.props.setError(error.toString());\n      this.setState({ loading: false });\n    }\n  };\n\n  experimentChoice = (prompt: boolean) => {\n    const { classes } = this.props;\n\n    const { loading } = this.state;\n    return (\n      <div>\n        <Typography className={classes.warning} color=\"textSecondary\">\n          <WarningRoundedIcon className={classes.warningIcon} /> Note: This tab\n          is experimental.\n        </Typography>\n\n        {prompt && (\n          <Typography className={classes.heading} color=\"textPrimary\">\n            You can use this tab to monitor Tune jobs, their statuses,\n            hyperparameters, and more. For more information, read the\n            documentation{\" \"}\n            <a href=\"https://docs.ray.io/en/latest/ray-dashboard.html#tune\">\n              here\n            </a>\n            .\n          </Typography>\n        )}\n        <div>\n          <Typography className={classes.prompt} color=\"textSecondary\">\n            Enter Tune Log Directory Here:\n          </Typography>\n          <TextField\n            className={classes.input}\n            id=\"standard-basic\"\n            value={this.state.experiment}\n            onChange={this.handleExperimentChange}\n          />\n          <Button\n            className={classes.submit}\n            variant=\"outlined\"\n            onClick={this.handleExperimentSubmit}\n          >\n            Submit\n          </Button>\n          {loading && (\n            <CircularProgress className={classes.progress} size={25} />\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    const { classes, tuneInfo, tuneAvailability } = this.props;\n\n    if (tuneAvailability && !tuneAvailability.trials_available) {\n      return this.experimentChoice(true);\n    }\n\n    const { tabIndex } = this.state;\n\n    const tabs = [\n      { label: \"Table\", component: TuneTable },\n      { label: \"TensorBoard\", component: TuneTensorBoard },\n    ];\n\n    if (tuneInfo !== null && Object.keys(tuneInfo.errors).length > 0) {\n      tabs.push({ label: \"Errors\", component: TuneErrors });\n    }\n\n    const SelectedComponent = tabs[tabIndex].component;\n    return (\n      <div className={classes.root}>\n        {this.experimentChoice(false)}\n        <Tabs\n          className={classes.tabs}\n          indicatorColor=\"primary\"\n          onChange={this.handleTabChange}\n          textColor=\"primary\"\n          value={tabIndex}\n        >\n          {tabs.map(({ label }) => (\n            <Tab key={label} label={label} />\n          ))}\n        </Tabs>\n        <SelectedComponent />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(Tune));\n","import {\n  createStyles,\n  Tab,\n  Tabs,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getNodeInfo, getRayletInfo, getTuneAvailability } from \"../../api\";\nimport { StoreState } from \"../../store\";\nimport LastUpdated from \"./LastUpdated\";\nimport LogicalView from \"./logical-view/LogicalView\";\nimport NodeInfo from \"./node-info/NodeInfo\";\nimport RayConfig from \"./ray-config/RayConfig\";\nimport { dashboardActions } from \"./state\";\nimport Tune from \"./tune/Tune\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(4),\n      },\n    },\n    tabs: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  tab: state.dashboard.tab,\n  tuneAvailability: state.dashboard.tuneAvailability,\n});\n\nconst mapDispatchToProps = dashboardActions;\n\nclass Dashboard extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps\n> {\n  timeoutId = 0;\n\n  refreshNodeAndRayletInfo = async () => {\n    try {\n      const [nodeInfo, rayletInfo, tuneAvailability] = await Promise.all([\n        getNodeInfo(),\n        getRayletInfo(),\n        getTuneAvailability(),\n      ]);\n      this.props.setNodeAndRayletInfo({ nodeInfo, rayletInfo });\n      this.props.setTuneAvailability(tuneAvailability);\n      this.props.setError(null);\n    } catch (error) {\n      this.props.setError(error.toString());\n    } finally {\n      this.timeoutId = window.setTimeout(this.refreshNodeAndRayletInfo, 1000);\n    }\n  };\n\n  async componentDidMount() {\n    await this.refreshNodeAndRayletInfo();\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeoutId);\n  }\n\n  handleTabChange = (event: React.ChangeEvent<{}>, value: number) => {\n    this.props.setTab(value);\n  };\n\n  render() {\n    const { classes, tab, tuneAvailability } = this.props;\n    const tabs = [\n      { label: \"Machine view\", component: NodeInfo },\n      { label: \"Logical view\", component: LogicalView },\n      { label: \"Ray config\", component: RayConfig },\n      { label: \"Tune\", component: Tune },\n    ];\n\n    // if Tune information is not available, remove Tune tab from the dashboard\n    if (tuneAvailability === null || !tuneAvailability.available) {\n      tabs.splice(3);\n    }\n\n    const SelectedComponent = tabs[tab].component;\n    return (\n      <div className={classes.root}>\n        <Typography variant=\"h5\">Ray Dashboard</Typography>\n        <Tabs\n          className={classes.tabs}\n          indicatorColor=\"primary\"\n          onChange={this.handleTabChange}\n          textColor=\"primary\"\n          value={tab}\n        >\n          {tabs.map(({ label }) => (\n            <Tab key={label} label={label} />\n          ))}\n        </Tabs>\n        <SelectedComponent />\n        <LastUpdated />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(Dashboard));\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { dashboardReducer } from \"./pages/dashboard/state\";\n\nexport const store = configureStore({\n  reducer: {\n    dashboard: dashboardReducer,\n  },\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nexport type StoreState = ReturnType<typeof store.getState>;\n","import { CssBaseline } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Dashboard from \"./pages/dashboard/Dashboard\";\nimport { store } from \"./store\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <CssBaseline />\n          <Route component={Dashboard} exact path=\"/\" />\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"typeface-roboto\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}